 /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConstantPanel.java
 *
 * Created on 23-mei-2011, 15:16:38
 */
package equa.factbreakdown.gui;

import java.awt.Color;

/**
 *
 * @author FrankP
 */
public class ConstantMatchPanel extends MatchPanel {

    private static final long serialVersionUID = 1L;
    private MatchPanel next;
    private boolean moved;

    /**
     * Creates new form ConstantPanel
     */
    public ConstantMatchPanel(String defined, String input) {
        initComponents();
        moved = false;
        tfDefined.setText(defined);
        tfDefined.select(0,0);
        tfDefined.setCaretPosition(0);

        // matching spaces at the start of the constant
        String definedTrimmed = defined.trim();
        int frontSpacesDefined = defined.indexOf(definedTrimmed);
        String inputTrimmed = input.trim();
        int frontSpacesInput = input.indexOf(inputTrimmed);
        if (frontSpacesDefined > frontSpacesInput) {
            input = defined.substring(0, frontSpacesDefined - frontSpacesInput) + input;
        }
        tfInput.setText(input);

        System.out.println("|" + tfInput.getText() + "| , |" + tfDefined.getText() + "|");
    }

    @Override
    public String getText() {
        return tfInput.getText();
    }

    @Override
    public void setNext(MatchPanel panel) {
        next = panel;
    }

    @Override
    public MatchPanel getNext() {
        return next;
    }

    public boolean hasConflictingConstants() {
        return !tfDefined.getText().equals(tfInput.getText());
    }

    public void copy() {
        tfInput.setText(tfDefined.getText());
        refreshLayout();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfInput = new javax.swing.JTextField();
        tfDefined = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setName("Form"); // NOI18N
        setLayout(new java.awt.GridLayout(0, 1));

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(equa.desktop.Symbiosis.class).getContext().getResourceMap(ConstantMatchPanel.class);
        tfInput.setFont(resourceMap.getFont("tfDefined.font")); // NOI18N
        tfInput.setText(resourceMap.getString("tfInput.text")); // NOI18N
        tfInput.setToolTipText(resourceMap.getString("tfInput.toolTipText")); // NOI18N
        tfInput.setName("tfInput"); // NOI18N
        tfInput.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
			public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfInputMouseClicked(evt);
            }
        });
        tfInput.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            @Override
			public void mouseDragged(java.awt.event.MouseEvent evt) {
                tfInputMouseDragged(evt);
            }
        });
        tfInput.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfInputActionPerformed(evt);
            }
        });
        add(tfInput);

        tfDefined.setFont(resourceMap.getFont("tfDefined.font")); // NOI18N
        tfDefined.setForeground(resourceMap.getColor("tfDefined.foreground")); // NOI18N
        tfDefined.setText(resourceMap.getString("tfDefined.text")); // NOI18N
        tfDefined.setToolTipText(resourceMap.getString("tfDefined.toolTipText")); // NOI18N
        tfDefined.setMinimumSize(new java.awt.Dimension(40, 20));
        tfDefined.setName("tfDefined"); // NOI18N
        add(tfDefined);
    }// </editor-fold>//GEN-END:initComponents

    private void tfInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfInputActionPerformed
        moveText();
    }

    private void moveText() {
        if (next == null || moved) {
            return;
        }

        moved = true;

        int caretPosition = tfInput.getCaretPosition();
        String value = tfInput.getText();
        int length = value.length();
        if (caretPosition >= length) {
            return;
        }
        while (caretPosition < length && Character.isWhitespace(value.charAt(caretPosition))) {
            caretPosition++;
        }
        String toMove = value.substring(caretPosition);
        tfInput.setText(value.substring(0, caretPosition));
        tfDefined.setText(tfInput.getText());
        next.appendFront(toMove);

        // matching spaces at the end of the constant
        String defined = tfDefined.getText();
        String definedTrimmed = defined.trim();
        int endSpacesDefined = defined.length() - (defined.indexOf(definedTrimmed) + definedTrimmed.length());
        String input = tfInput.getText();
        String inputTrimmed = input.trim();
        int endSpacesInput = input.length() - (input.indexOf(inputTrimmed) + inputTrimmed.length());
        if (endSpacesDefined > endSpacesInput) {
            tfInput.setText(input + defined.substring(defined.length() - endSpacesDefined + endSpacesInput));
        }
        refreshLayout();
    }//GEN-LAST:event_tfInputActionPerformed

    private void tfInputMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfInputMouseDragged
        if (!moved && tfInput.getCaretPosition() >= tfInput.getSelectionStart()
                && tfInput.getSelectionStart() >= 0) {
            moveText();
        }
    }//GEN-LAST:event_tfInputMouseDragged

    private void tfInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfInputMouseClicked
        if (tfInput.getText().isEmpty()) {
            tfInput.setColumns(4);
            refreshLayout();
        }
    }//GEN-LAST:event_tfInputMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField tfDefined;
    private javax.swing.JTextField tfInput;
    // End of variables declaration//GEN-END:variables

    @Override
    void appendFront(String toMove) {
        tfInput.setText(toMove + tfInput.getText());
        if (next == null) {
            tfDefined.setText(tfInput.getText());
        }
    }

    void setColor(Color color) {
        tfDefined.setBackground(color);
        tfInput.setBackground(color);
    }
}
