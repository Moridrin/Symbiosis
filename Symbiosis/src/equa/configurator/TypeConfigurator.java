/*
 *
 * Created on 14-jul-2011, 13:39:19
 */
package equa.configurator;

import java.awt.Color;
import java.awt.Component;
import java.awt.Frame;
import java.awt.event.MouseAdapter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;
import javax.swing.table.TableColumnModel;

import com.vlsolutions.swing.docking.DockKey;
import com.vlsolutions.swing.docking.Dockable;

import equa.code.operations.Operation;
import equa.meta.ChangeNotAllowedException;
import equa.meta.DuplicateException;
import equa.meta.Message;
import equa.meta.MismatchException;
import equa.meta.objectmodel.BaseType;
import equa.meta.objectmodel.BaseValueRole;
import equa.meta.objectmodel.CBTRole;
import equa.meta.objectmodel.ConstrainedBaseType;
import equa.meta.objectmodel.ElementsFactType;
import equa.meta.objectmodel.FactType;
import equa.meta.objectmodel.MandatoryConstraint;
import equa.meta.objectmodel.ObjectModel;
import equa.meta.objectmodel.ObjectRole;
import equa.meta.objectmodel.ObjectType;
import equa.meta.objectmodel.Role;
import equa.meta.objectmodel.Tuple;
import equa.meta.objectmodel.TupleItem;
import equa.meta.objectmodel.TypeExpression;
import equa.meta.objectmodel.UniquenessConstraint;
import equa.meta.requirements.ActionRequirement;
import equa.meta.requirements.RequirementModel;
import equa.meta.requirements.RuleRequirement;
import equa.meta.traceability.Category;
import equa.meta.traceability.ExternalInput;
import equa.project.ProjectMemberRole;
import equa.project.ProjectRole;
import equa.util.Naming;
import equa.util.SwingUtils;

/**
 *
 * @author frankpeeters, RuudLenders
 */
public class TypeConfigurator extends javax.swing.JPanel implements Dockable {

    private static final long serialVersionUID = 1L;
    public static final Color RELIABLE = new Color(0, 0, 102); // dark blue
    public static final Color UNRELIABLE = Color.gray;
    private ObjectModel om;
    private Frame parent;
    private DockKey key;
    private boolean reliableClasses;
    private javax.swing.JCheckBoxMenuItem miAbstractOT;

    /**
     * Creates new TypeConfigurator
     */
    public TypeConfigurator(Frame parent, ObjectModel om) {
        this.om = om;
        this.parent = parent;
        this.key = new DockKey("Type Configurator");
        this.key.setCloseEnabled(false);
        initComponents();

        miAbstractOT = new javax.swing.JCheckBoxMenuItem();
        miAbstractOT.setText("Add Abstract Object Type");
        miAbstractOT.setName("miAbstractOT");
        miAbstractOT.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAbstractOTActionPerformed(evt);
            }
        });
        factTypePopup.add(miAbstractOT);

        pnClass.setSize(splitPane.getWidth() / 2, splitPane.getHeight());
        pnFactType.setSize(splitPane.getWidth() / 2, splitPane.getHeight());
        tfFactType.setLocation(0, 0);
        tfFactType.setSize(splitPane.getWidth() / 2, 29);
        tbRoles.setLocation(0, tfFactType.getHeight());
        tbRoles.setSize(splitPane.getWidth() / 2, 80);
        pnRoles.setSize(splitPane.getWidth() / 2, 109);
        setColumnsFactTypeTable();
        this.reliableClasses = true;
        refresh();

        tbFactTypes.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbFactTypesMousePressed(evt);
            }
        });

        tbRoles.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbRolesMousePressed(evt);
            }
        });
    }

    public void setObjectModel(ObjectModel om) {
        this.om = om;
        tbFactTypes.setModel(new FactTypeTableModel(om));
        reliableClasses = true;
        refresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        factTypePopup = new javax.swing.JPopupMenu();
        miDerivable = new javax.swing.JCheckBoxMenuItem();
        miDefaultBoolean = new javax.swing.JCheckBoxMenuItem();
        miComparable = new javax.swing.JCheckBoxMenuItem();
        miChangeId = new javax.swing.JCheckBoxMenuItem();
        miValueConstraint = new javax.swing.JMenuItem();
        miValueType = new javax.swing.JCheckBoxMenuItem();
        sFactType1 = new javax.swing.JPopupMenu.Separator();
        miRename = new javax.swing.JMenuItem();
        miTypeExpression = new javax.swing.JMenuItem();
        sFactType2 = new javax.swing.JPopupMenu.Separator();
        miRemoveFT = new javax.swing.JMenuItem();
        miObjectifyFT = new javax.swing.JMenuItem();
        miDeobjectifyFT = new javax.swing.JMenuItem();
        miInheritance = new javax.swing.JMenuItem();
        rolePopup = new javax.swing.JPopupMenu();
        miUniqueness = new javax.swing.JCheckBoxMenuItem();
        miMandatory = new javax.swing.JCheckBoxMenuItem();
        miUniquenessMandatory = new javax.swing.JMenuItem();
        miFrequency = new javax.swing.JCheckBoxMenuItem();
        sRole2 = new javax.swing.JPopupMenu.Separator();
        miSettable = new javax.swing.JCheckBoxMenuItem();
        miAdjustable = new javax.swing.JCheckBoxMenuItem();
        miAddable = new javax.swing.JCheckBoxMenuItem();
        miInsertable = new javax.swing.JCheckBoxMenuItem();
        miRemovable = new javax.swing.JCheckBoxMenuItem();
        miComposition = new javax.swing.JCheckBoxMenuItem();
        sRole3 = new javax.swing.JPopupMenu.Separator();
        miNavigable = new javax.swing.JCheckBoxMenuItem();
        miHidden = new javax.swing.JCheckBoxMenuItem();
        sRole4 = new javax.swing.JPopupMenu.Separator();
        miQualifier = new javax.swing.JCheckBoxMenuItem();
        miAutoIncr = new javax.swing.JCheckBoxMenuItem();
        sRole5 = new javax.swing.JPopupMenu.Separator();
        miDefaultValue = new javax.swing.JCheckBoxMenuItem();
        miConstrainedBaseType = new javax.swing.JMenuItem();
        sRole6 = new javax.swing.JPopupMenu.Separator();
        miRenameRole = new javax.swing.JMenuItem();
        miReplaceBT = new javax.swing.JMenuItem();
        miReplaceWithSuperType = new javax.swing.JMenuItem();
        miReplaceWithSubType = new javax.swing.JMenuItem();
        miObjectifyRoles = new javax.swing.JMenuItem();
        miDeobjectifyRole = new javax.swing.JMenuItem();
        splitPane = new javax.swing.JSplitPane();
        pnFactType = new javax.swing.JPanel();
        pnRoles = new javax.swing.JPanel();
        tfFactType = new javax.swing.JTextField();
        spRoles = new javax.swing.JScrollPane();
        tbRoles = new javax.swing.JTable();
        spFactTypes = new javax.swing.JScrollPane();
        tbFactTypes = new javax.swing.JTable();
        spSpecification = new javax.swing.JScrollPane();
        taSpecification = new javax.swing.JTextArea();
        pnClass = new javax.swing.JPanel();
        tfObjecttype = new javax.swing.JTextField();
        spOperations = new javax.swing.JScrollPane();
        lsOperations = new javax.swing.JList();

        factTypePopup.setName("factTypePopup"); // NOI18N

        miDerivable.setText("Derivable");
        miDerivable.setToolTipText("");
        miDerivable.setName("miDerivable"); // NOI18N
        miDerivable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDerivableActionPerformed(evt);
            }
        });
        factTypePopup.add(miDerivable);

        miDefaultBoolean.setSelected(true);
        miDefaultBoolean.setText("DefaultBoolean");
        miDefaultBoolean.setActionCommand("Default Boolean");
        miDefaultBoolean.setName("miDefaultBoolean"); // NOI18N
        miDefaultBoolean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDefaultBooleanActionPerformed(evt);
            }
        });
        factTypePopup.add(miDefaultBoolean);

        miComparable.setSelected(true);
        miComparable.setText("Comparable");
        miComparable.setToolTipText("Are the values ordered?");
        miComparable.setName("miComparable"); // NOI18N
        miComparable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miComparableActionPerformed(evt);
            }
        });
        factTypePopup.add(miComparable);

        miChangeId.setSelected(true);
        miChangeId.setText("Mutable Id");
        miChangeId.setName("miChangeId"); // NOI18N
        miChangeId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miChangeIdActionPerformed(evt);
            }
        });
        factTypePopup.add(miChangeId);

        miValueConstraint.setText("Edit Constrained Base Type");
        miValueConstraint.setToolTipText("Adding of value constraints at Value Type ");
        miValueConstraint.setName("miValueConstraint"); // NOI18N
        miValueConstraint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miValueConstraintActionPerformed(evt);
            }
        });
        factTypePopup.add(miValueConstraint);

        miValueType.setSelected(true);
        miValueType.setText("Value Type");
        miValueType.setToolTipText("");
        miValueType.setName("miValueType"); // NOI18N
        miValueType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miValueTypeActionPerformed(evt);
            }
        });
        factTypePopup.add(miValueType);

        sFactType1.setName("sFactType1"); // NOI18N
        factTypePopup.add(sFactType1);

        miRename.setText("Rename");
        miRename.setName("miRename"); // NOI18N
        miRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRenameActionPerformed(evt);
            }
        });
        factTypePopup.add(miRename);

        miTypeExpression.setText("Type Expression");
        miTypeExpression.setName("miTypeExpression"); // NOI18N
        miTypeExpression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miTypeExpressionActionPerformed(evt);
            }
        });
        factTypePopup.add(miTypeExpression);

        sFactType2.setName("sFactType2"); // NOI18N
        factTypePopup.add(sFactType2);

        miRemoveFT.setText("Remove");
        miRemoveFT.setName("miRemoveFT"); // NOI18N
        miRemoveFT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRemoveFTActionPerformed(evt);
            }
        });
        factTypePopup.add(miRemoveFT);

        miObjectifyFT.setText("Objectify Fact Type");
        miObjectifyFT.setToolTipText("");
        miObjectifyFT.setName("miObjectifyFT"); // NOI18N
        miObjectifyFT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miObjectifyFTActionPerformed(evt);
            }
        });
        factTypePopup.add(miObjectifyFT);

        miDeobjectifyFT.setText("Deobjectify Fact Type");
        miDeobjectifyFT.setName("miDeobjectifyFT"); // NOI18N
        miDeobjectifyFT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDeobjectifyFTActionPerformed(evt);
            }
        });
        factTypePopup.add(miDeobjectifyFT);

        miInheritance.setText("Inheritance");
        miInheritance.setName("miInheritance"); // NOI18N
        miInheritance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miInheritanceActionPerformed(evt);
            }
        });
        factTypePopup.add(miInheritance);

        rolePopup.setName("rolePopup"); // NOI18N

        miUniqueness.setText("Uniqueness");
        miUniqueness.setName("miUniqueness"); // NOI18N
        miUniqueness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miUniquenessActionPerformed(evt);
            }
        });
        rolePopup.add(miUniqueness);

        miMandatory.setText("Mandatory");
        miMandatory.setToolTipText("");
        miMandatory.setName("miMandatory"); // NOI18N
        miMandatory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miMandatoryActionPerformed(evt);
            }
        });
        rolePopup.add(miMandatory);

        miUniquenessMandatory.setText("Uniqueness & Mandatory");
        miUniquenessMandatory.setName("miUniquenessMandatory"); // NOI18N
        miUniquenessMandatory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miUniquenessMandatoryActionPerformed(evt);
            }
        });
        rolePopup.add(miUniquenessMandatory);

        miFrequency.setSelected(true);
        miFrequency.setText("Frequency");
        miFrequency.setName("miFrequency"); // NOI18N
        miFrequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFrequencyActionPerformed(evt);
            }
        });
        rolePopup.add(miFrequency);

        sRole2.setName("sRole2"); // NOI18N
        rolePopup.add(sRole2);

        miSettable.setText("Settable");
        miSettable.setToolTipText("");
        miSettable.setName("miSettable"); // NOI18N
        miSettable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSettableActionPerformed(evt);
            }
        });
        rolePopup.add(miSettable);

        miAdjustable.setSelected(true);
        miAdjustable.setText("Adjustable");
        miAdjustable.setName("miAdjustable"); // NOI18N
        miAdjustable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAdjustableActionPerformed(evt);
            }
        });
        rolePopup.add(miAdjustable);

        miAddable.setText("Addable");
        miAddable.setName("miAddable"); // NOI18N
        miAddable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAddableActionPerformed(evt);
            }
        });
        rolePopup.add(miAddable);

        miInsertable.setSelected(true);
        miInsertable.setText("Insertable");
        miInsertable.setName("miInsertable"); // NOI18N
        miInsertable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miInsertableActionPerformed(evt);
            }
        });
        rolePopup.add(miInsertable);

        miRemovable.setSelected(true);
        miRemovable.setText("Removable");
        miRemovable.setName("miRemovable"); // NOI18N
        miRemovable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRemovableActionPerformed(evt);
            }
        });
        rolePopup.add(miRemovable);

        miComposition.setText("Composition");
        miComposition.setName("miComposition"); // NOI18N
        miComposition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCompositionActionPerformed(evt);
            }
        });
        rolePopup.add(miComposition);

        sRole3.setName("sRole3"); // NOI18N
        rolePopup.add(sRole3);

        miNavigable.setText("Navigable");
        miNavigable.setName("miNavigable"); // NOI18N
        miNavigable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNavigableActionPerformed(evt);
            }
        });
        rolePopup.add(miNavigable);

        miHidden.setText("Hidden");
        miHidden.setToolTipText("Does this property need publishment");
        miHidden.setName("miHidden"); // NOI18N
        miHidden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miHiddenActionPerformed(evt);
            }
        });
        rolePopup.add(miHidden);

        sRole4.setName("sRole4"); // NOI18N
        rolePopup.add(sRole4);

        miQualifier.setText("Qualifier");
        miQualifier.setToolTipText("Is this value a qualifier of another value of this fact type ");
        miQualifier.setName("miQualifier"); // NOI18N
        miQualifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miQualifierActionPerformed(evt);
            }
        });
        rolePopup.add(miQualifier);

        miAutoIncr.setSelected(true);
        miAutoIncr.setText("Auto Increment");
        miAutoIncr.setName("miAutoIncr"); // NOI18N
        miAutoIncr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAutoIncrActionPerformed(evt);
            }
        });
        rolePopup.add(miAutoIncr);

        sRole5.setName("sRole5"); // NOI18N
        rolePopup.add(sRole5);

        miDefaultValue.setSelected(true);
        miDefaultValue.setText("Default Value");
        miDefaultValue.setToolTipText("");
        miDefaultValue.setName("miDefaultValue"); // NOI18N
        miDefaultValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDefaultValueActionPerformed(evt);
            }
        });
        rolePopup.add(miDefaultValue);

        miConstrainedBaseType.setText("Create Constrained Base Type");
        miConstrainedBaseType.setToolTipText("Are all values of this base type allowed");
        miConstrainedBaseType.setName("miConstrainedBaseType"); // NOI18N
        miConstrainedBaseType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miConstrainedBaseTypeActionPerformed(evt);
            }
        });
        rolePopup.add(miConstrainedBaseType);

        sRole6.setName("sRole6"); // NOI18N
        rolePopup.add(sRole6);

        miRenameRole.setText("Rename Role");
        miRenameRole.setName("miRenameRole"); // NOI18N
        miRenameRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRenameRoleActionPerformed(evt);
            }
        });
        rolePopup.add(miRenameRole);

        miReplaceBT.setText("Replace Base Type");
        miReplaceBT.setName("miReplaceBT"); // NOI18N
        miReplaceBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miReplaceBTActionPerformed(evt);
            }
        });
        rolePopup.add(miReplaceBT);

        miReplaceWithSuperType.setText("Replace By Super Type");
        miReplaceWithSuperType.setName("miReplaceWithSuperType"); // NOI18N
        miReplaceWithSuperType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miReplaceWithSuperTypeActionPerformed(evt);
            }
        });
        rolePopup.add(miReplaceWithSuperType);

        miReplaceWithSubType.setText("Replace By Sub Type");
        miReplaceWithSubType.setName("miReplaceWithSubType"); // NOI18N
        miReplaceWithSubType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miReplaceWithSubTypeActionPerformed(evt);
            }
        });
        rolePopup.add(miReplaceWithSubType);

        miObjectifyRoles.setText("Objectify Roles");
        miObjectifyRoles.setName("miObjectifyRoles"); // NOI18N
        miObjectifyRoles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miObjectifyRolesActionPerformed(evt);
            }
        });
        rolePopup.add(miObjectifyRoles);

        miDeobjectifyRole.setText("Deobjectify Role");
        miDeobjectifyRole.setName("miDeobjectifyRole"); // NOI18N
        miDeobjectifyRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDeobjectifyRoleActionPerformed(evt);
            }
        });
        rolePopup.add(miDeobjectifyRole);

        setLayout(new java.awt.BorderLayout());

        splitPane.setDividerSize(5);
        splitPane.setName("splitPane"); // NOI18N

        pnFactType.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnFactType.setName("pnFactType"); // NOI18N
        pnFactType.setPreferredSize(new java.awt.Dimension(750, 3361));
        pnFactType.setLayout(new java.awt.BorderLayout());

        pnRoles.setBorder(new javax.swing.border.MatteBorder(null));
        pnRoles.setName("pnRoles"); // NOI18N
        pnRoles.setPreferredSize(new java.awt.Dimension(600, 140));
        pnRoles.setLayout(new java.awt.BorderLayout());

        tfFactType.setEditable(false);
        tfFactType.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        tfFactType.setForeground(new java.awt.Color(0, 0, 102));
        tfFactType.setText("No FactType Selected");
        tfFactType.setName("tfFactType"); // NOI18N
        tfFactType.setPreferredSize(new java.awt.Dimension(452, 29));
        tfFactType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfFactTypeActionPerformed(evt);
            }
        });
        pnRoles.add(tfFactType, java.awt.BorderLayout.PAGE_START);

        spRoles.setBorder(null);
        spRoles.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        spRoles.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        spRoles.setName("spRoles"); // NOI18N
        spRoles.setPreferredSize(new java.awt.Dimension(600, 400));

        tbRoles.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        tbRoles.setForeground(new java.awt.Color(0, 0, 102));
        tbRoles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbRoles.setName("tbRoles"); // NOI18N
        tbRoles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbRolesMousePressed(evt);
            }
        });
        spRoles.setViewportView(tbRoles);

        pnRoles.add(spRoles, java.awt.BorderLayout.CENTER);

        pnFactType.add(pnRoles, java.awt.BorderLayout.NORTH);

        spFactTypes.setBorder(new javax.swing.border.MatteBorder(null));
        spFactTypes.setName("spFactTypes"); // NOI18N
        spFactTypes.setPreferredSize(new java.awt.Dimension(600, 402));

        tbFactTypes.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        tbFactTypes.setForeground(new java.awt.Color(0, 0, 102));
        tbFactTypes.setModel(new equa.configurator.FactTypeTableModel(om));
        tbFactTypes.setName("tbFactTypes"); // NOI18N
        tbFactTypes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbFactTypesMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbFactTypesMouseClicked(evt);
            }
        });
        tbFactTypes.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                tbFactTypesComponentAdded(evt);
            }
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                tbFactTypesComponentRemoved(evt);
            }
        });
        spFactTypes.setViewportView(tbFactTypes);
        TableColumnModel tcm = tbFactTypes.getColumnModel();
        //tbFactTypes.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);

        tcm.getColumn(0).setMinWidth(40);
        tcm.getColumn(1).setMinWidth(100);
        tcm.getColumn(2).setMinWidth(200);
        tcm.getColumn(3).setMinWidth(50);
        tcm.getColumn(4).setMinWidth(50);

        pnFactType.add(spFactTypes, java.awt.BorderLayout.CENTER);

        spSpecification.setBorder(javax.swing.BorderFactory.createTitledBorder("Specification of Selected Operation"));
        spSpecification.setName("spSpecification"); // NOI18N
        spSpecification.setPreferredSize(new java.awt.Dimension(236, 100));

        taSpecification.setEditable(false);
        taSpecification.setColumns(20);
        taSpecification.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        taSpecification.setForeground(new java.awt.Color(0, 0, 102));
        taSpecification.setRows(5);
        taSpecification.setName("taSpecification"); // NOI18N
        taSpecification.setPreferredSize(new java.awt.Dimension(260, 50));
        spSpecification.setViewportView(taSpecification);

        pnFactType.add(spSpecification, java.awt.BorderLayout.PAGE_END);

        splitPane.setLeftComponent(pnFactType);

        pnClass.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnClass.setName("pnClass"); // NOI18N
        pnClass.setPreferredSize(new java.awt.Dimension(300, 356));
        pnClass.setLayout(new java.awt.BorderLayout());

        tfObjecttype.setEditable(false);
        tfObjecttype.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        tfObjecttype.setForeground(new java.awt.Color(0, 0, 102));
        tfObjecttype.setName("tfObjecttype"); // NOI18N
        pnClass.add(tfObjecttype, java.awt.BorderLayout.PAGE_START);

        spOperations.setBorder(javax.swing.BorderFactory.createTitledBorder("Operations Class"));
        spOperations.setName("spOperations"); // NOI18N
        spOperations.setPreferredSize(new java.awt.Dimension(268, 175));

        lsOperations.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lsOperations.setForeground(new java.awt.Color(0, 0, 102));
        lsOperations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lsOperations.setName("lsOperations"); // NOI18N
        lsOperations.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lsOperationsValueChanged(evt);
            }
        });
        spOperations.setViewportView(lsOperations);

        pnClass.add(spOperations, java.awt.BorderLayout.CENTER);

        splitPane.setRightComponent(pnClass);

        add(splitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    public final void refresh() {
        tbFactTypes.setVisible(false);
        om.fireListChanged();
        tbFactTypes.setVisible(true);
        SwingUtils.resizeColumnWidth(tbFactTypes);

        if (om.requiresLightBehavior()) {
            ((TitledBorder) spOperations.getBorder()).setTitle("Operations Class (light version)");
        } else {
            ((TitledBorder) spOperations.getBorder()).setTitle("Operations Class (verbose version)");
        }

        if (reliableClasses) {
            tfObjecttype.setForeground(RELIABLE);
            lsOperations.setForeground(RELIABLE);

        } else {
            tfObjecttype.setForeground(UNRELIABLE);
            lsOperations.setForeground(UNRELIABLE);
        }

        FactType ft = getSelectedFactType();
        if (ft == null) {
            lsOperations.setModel(new DefaultListModel<Operation>());
            taSpecification.setText("");
            tfObjecttype.setText("");
            tfFactType.setText("No FactType Selected");
            tbRoles.setVisible(false);
        } else {
            setRoleTableModel(ft);
            tbRoles.setVisible(true);
            tfFactType.setText(ft.getName());

            if (ft.isClass()) {
                ObjectType ot = ft.getObjectType();
                if (ot.getCodeClass() == null) {
                    return;
                }
                lsOperations.setModel(ot.getCodeClass());
                String classtext;
                if (ot.isAbstract()) {
                    classtext = "abstract class ";
                } else if (ft.isEnum()) {
                    classtext = "enum ";
                } else {
                    classtext = "class ";
                }
                tfObjecttype.setText(classtext + ot.getName() + " " + inheritString(ot));

            } else {
                lsOperations.setModel(new DefaultListModel<Operation>());
                taSpecification.setText("");
                tfObjecttype.setText("");
            }
        }

    }

    private void miRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRenameActionPerformed
        String name = JOptionPane.showInputDialog(this, "rename: " + getSelectedFactType().getName());
        if (name == null) {
            JOptionPane.showMessageDialog(this, "Unable to rename the selected fact type.");
        } else if (!Naming.isIdentifier(name)) {
            JOptionPane.showMessageDialog(this, "Typename must fulfill the rules "
                    + "of an identifier: it must begin with a letter or an underscore (_) and"
                    + "may be followed by one or more letter, underscore or digit");
        } else {
            try {
                om.renameFactType(getSelectedFactType(), name);
                reliableClasses = false;
                refresh();
            } catch (DuplicateException | ChangeNotAllowedException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_miRenameActionPerformed

    private void miRemoveFTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRemoveFTActionPerformed
        FactType ft = getSelectedFactType();
        if (ft != null) {
            try {
                om.removeFactType(ft);
                reliableClasses = false;
                refresh();
            } catch (ChangeNotAllowedException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }

        }
    }//GEN-LAST:event_miRemoveFTActionPerformed

    private void miTypeExpressionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miTypeExpressionActionPerformed
        EditTypeExpressionDialog dialog;
        if (getSelectedFactType().isObjectType()) {
            dialog = new EditTypeExpressionDialog(parent, getSelectedFactType(),
                    getSelectedFactType().getObjectType().getOTE(), "Edit Object Type Expression",
                    om.getProject().getCurrentUser());

        } else {
            dialog = new EditTypeExpressionDialog(parent, getSelectedFactType(),
                    getSelectedFactType().getFTE(), "Edit Fact Type Expression",
                    om.getProject().getCurrentUser());
        }
        dialog.setVisible(true);
        tbFactTypes.revalidate();
    }//GEN-LAST:event_miTypeExpressionActionPerformed

    private void miValueTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miValueTypeActionPerformed
        if (getSelectedFactType().isObjectType()) {
            ObjectType ot = getSelectedFactType().getObjectType();
            ot.setValueType(!ot.isValueType());
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miValueTypeActionPerformed

    private void miValueConstraintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miValueConstraintActionPerformed
        ConstrainedBaseType cbt = (ConstrainedBaseType) getSelectedFactType().getObjectType();
        ConstrainedBaseTypeDialog dialog
                = new ConstrainedBaseTypeDialog(this.parent, true, cbt);
        dialog.setVisible(true);
    }//GEN-LAST:event_miValueConstraintActionPerformed

    private void miObjectifyFTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miObjectifyFTActionPerformed
        FactType ft = getSelectedFactType();
        if (ft != null && !ft.isObjectType()) {
            ft.objectify();
            EditTypeExpressionDialog dialog = new EditTypeExpressionDialog(this.parent, ft, ft.getObjectType().getOTE(),
                    "Edit Object Type Expression", om.getProject().getCurrentUser());
            dialog.setVisible(true);
            reliableClasses = false;
            refresh();

        }
    }//GEN-LAST:event_miObjectifyFTActionPerformed

    private void miDerivableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDerivableActionPerformed
        if (getSelectedFactType().isDerivable()) {
            try {
                getSelectedFactType().getDerivableConstraint().remove();
                refresh();
            } catch (ChangeNotAllowedException ex) {
                Logger.getLogger(TypeConfigurator.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String text = JOptionPane.showInputDialog(this,
                    "please enter the derivation rule");
            if (text == null || text.isEmpty()) {
                JOptionPane.showMessageDialog(this, "description of "
                        + "derivation rule cannot be empty");
            } else {
                RuleRequirement rule = createRuleRequirement(text, getSelectedFactType().getCategory());
                getSelectedFactType().addDerivableConstraint(rule, text);
                reliableClasses = false;
                refresh();
            }
        }
    }//GEN-LAST:event_miDerivableActionPerformed

    private void miUniquenessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miUniquenessActionPerformed
        int[] selectedValues = tbRoles.getSelectedRows();
        if (selectedValues.length == 0) {
            return;
        }
        FactType ft = getSelectedFactType();
        if (!miUniqueness.isSelected()) {
            // removing of common uniqueness constraints of selected roles
            HashSet<UniquenessConstraint> ucs = new HashSet<>();
            for (int value : selectedValues) {
                ucs.addAll(ft.getRole(value).ucs());
            }

//            ucs.addAll(ft.getRole(0).ucs());
//            for (int i = 1; i < selectedValues.length; i++) {
//                ucs.retainAll(ft.getRole(selectedValues[i]).ucs());
//            }
            for (UniquenessConstraint uc : ucs) {
                try {
                    uc.remove();
                } catch (ChangeNotAllowedException ex) {
                    JOptionPane.showMessageDialog(parent, ex.getMessage());
                }
            }
            reliableClasses = false;
            refresh();
        } else {
            try {
                // adding of new uniqueness constraint
                List<Role> roles = new ArrayList<>();
                for (int i = 0; i < selectedValues.length; i++) {
                    roles.add(ft.getRole(selectedValues[i]));
                }
                String rule_text = "Two (or more) facts about " + roles.get(0).getParent().getFactTypeString()
                        + " with the same value on <"
                        + roleValues(roles) + "> are not allowed.";

                RuleRequirement rule = initRule(rule_text, ft.getCategory());

                new UniquenessConstraint(roles, rule);
                reliableClasses = false;
                refresh();
            } catch (ChangeNotAllowedException ex) {
            }
        }
    }//GEN-LAST:event_miUniquenessActionPerformed

    private void miMandatoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miMandatoryActionPerformed
        List<Role> roles = getSelectedRoles();
        if (roles.isEmpty()) {
            JOptionPane.showMessageDialog(this, "please select role");
        } else {

            try {
                Role role = roles.get(0);
                if (roles.size() == 1) {

                    if (!role.isMandatory()) {
                        RuleRequirement mandatoryRule
                                = initRule("Every <" + Naming.withCapital(role.getSubstitutionType().getName())
                                        + "> cannot exist without a fact about " + role.getParent().getFactTypeString() + ", without any consideration.", role.getParent().getCategory());
                        new MandatoryConstraint(role, mandatoryRule);
                    } else {
                        role.deleteMandatoryConstraint();
                    }
                    reliableClasses = false;
                    refresh();
                } else {
                    JOptionPane.showMessageDialog(this, "please select exactly one role");
                }

            } catch (ChangeNotAllowedException ex) {
                Logger.getLogger(TypeConfigurator.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_miMandatoryActionPerformed

    private void miNavigableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNavigableActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            role.setNavigable(miNavigable.isSelected());
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miNavigableActionPerformed

    private void miCompositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCompositionActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            role.setComposition(miComposition.isSelected());
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miCompositionActionPerformed

    private void miHiddenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miHiddenActionPerformed
        Role role = getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            role.setHidden(miHidden.isSelected());
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miHiddenActionPerformed

    private void miSettableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSettableActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            if (miSettable.isSelected()) {

                role.addSettable("");

            } else {
                try {
                    role.getSettable().remove();
                } catch (ChangeNotAllowedException ex) {
                    Logger.getLogger(TypeConfigurator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miSettableActionPerformed

    private void miAddableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAddableActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            if (miAddable.isSelected()) {

                role.addAddable("");
            } else {
                try {
                    role.getAddable().remove();
                } catch (ChangeNotAllowedException ex) {
                    Logger.getLogger(TypeConfigurator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miAddableActionPerformed

    private void miAbstractOTActionPerformed(java.awt.event.ActionEvent evt) {

        AbstractObjectTypeDialog dialog = new AbstractObjectTypeDialog(parent, true, om);
        dialog.setVisible(true);
        reliableClasses = false;
        refresh();

    }

    private void miQualifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miQualifierActionPerformed
        Role qualifierRole = getSelectedRole();
        if (qualifierRole == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            if (!qualifierRole.isQualifier()) {
                Iterator<Role> it = getSelectedFactType().roles();
                ArrayList<Role> candidates = new ArrayList<>();
                while (it.hasNext()) {
                    Role candidate = it.next();
                    List<Role> qR = new ArrayList<>();
                    qR.add(qualifierRole);
                    if (qualifierRole != candidate && candidate.isNavigable()
                            && candidate.hasCommonUniquenessWith(qR)) {
                        candidates.add(candidate);
                    }
                }
                if (candidates.isEmpty()) {
                    JOptionPane.showMessageDialog(getParent(), "there are no"
                            + " suitable matching roles");
                } else {
                    Role qualified = (Role) JOptionPane.showInputDialog(getParent(),
                            qualifierRole, "please select the related qualified role",
                            JOptionPane.INFORMATION_MESSAGE, null, candidates.toArray(), null);
                    if (qualified != null) {
                        qualifierRole.setQualifier((ObjectRole) qualified);
                    }
                }
            } else {
                qualifierRole.setQualifier(null);
            }
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miQualifierActionPerformed

    private void miRenameRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRenameRoleActionPerformed
        int[] numbers = tbRoles.getSelectedRows();
        if (numbers.length == 1) {
            Role role = getSelectedRole();
            String name;

            name = JOptionPane.showInputDialog(this, "please enter unique rolename");

            if (name == null) {
                return;
            }

            if (!name.isEmpty() && !Naming.isIdentifier(name)) {
                JOptionPane.showMessageDialog(this, "Rolename must fulfill the rules "
                        + "of an identifier: it must begin with a letter or an underscore (_) and"
                        + "may be followed by one or more letter, underscore or digit");
                return;
            }
            try {
                getSelectedFactType().setRoleName(name, role);
            } catch (DuplicateException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
        reliableClasses = false;
        refresh();
    }//GEN-LAST:event_miRenameRoleActionPerformed

    private void miConstrainedBaseTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miConstrainedBaseTypeActionPerformed

        // JOptionPane.showMessageDialog(this, "unsupported operation; bug fixing of value constraints realization is needed");
        try {

            int[] selectedValues = tbRoles.getSelectedRows();
            if (selectedValues.length != 1) {
                return;
            }
            BaseValueRole br = (BaseValueRole) getSelectedFactType().getRole(selectedValues[0]);

            FactType cbt = om.objectifyToConstrainedBaseType(br);
            ConstrainedBaseTypeDialog dialog
                    = new ConstrainedBaseTypeDialog(this.parent, true, (ConstrainedBaseType) cbt.getObjectType());
            dialog.setVisible(true);
            reliableClasses = false;
            refresh();
        } catch (DuplicateException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_miConstrainedBaseTypeActionPerformed

    public void showMessages(String messages) {
        spSpecification.setVisible(false);
        taSpecification.setText(messages);
        ((TitledBorder) spSpecification.getBorder()).setTitle("Errors and warnings");
        spSpecification.setVisible(true);
    }

    private void lsOperationsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lsOperationsValueChanged

        spSpecification.setVisible(false);
        Operation feature = (Operation) lsOperations.getSelectedValue();
        if (feature != null) {
            taSpecification.setText(feature.getSpec());
            ((TitledBorder) spSpecification.getBorder()).setTitle("Specification of " + getSelectedFactType().getName() + " :: " + feature.callString());
        } else {
            taSpecification.setText("");
            ((TitledBorder) spSpecification.getBorder()).setTitle("Specification of Selected Operation");
        }
        spSpecification.setVisible(true);

    }//GEN-LAST:event_lsOperationsValueChanged

    private void miDefaultValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDefaultValueActionPerformed
        int[] numbers = tbRoles.getSelectedRows();
        if (numbers.length == 1) {
            if (getSelectedRole() instanceof BaseValueRole) {
                BaseValueRole role = (BaseValueRole) getSelectedRole();
                if (role.hasDefaultValue()) {

                    role.removeDefaultValue();

                } else {
                    String value;

                    value = JOptionPane.showInputDialog(this, "please enter default "
                            + role.getSubstitutionType().getName() + " value");

                    if (value == null) {
                        return;
                    }
                    try {
                        role.setDefaultValue(value);
                    } catch (MismatchException ex) {
                        JOptionPane.showMessageDialog(this, "value "
                                + value + " is not a correct "
                                + role.getSubstitutionType().getName() + " value");
                        return;
                    } catch (ChangeNotAllowedException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                        return;
                    }
                }
            } else if (getSelectedRole() instanceof CBTRole) {
                CBTRole role = (CBTRole) getSelectedRole();
                if (role.hasDefaultValue()) {
                    role.removeDefaultValue();
                } else {
                    String value;
                    value = JOptionPane.showInputDialog(this, "please enter default "
                            + role.getSubstitutionType().getName() + " value out of "
                            + ((ConstrainedBaseType) role.getSubstitutionType()).valuesString());

                    if (value == null) {
                        return;
                    }
                    try {
                        role.setDefaultValue(value);
                    } catch (MismatchException ex) {
                        JOptionPane.showMessageDialog(this, "value "
                                + value + " is not a correct "
                                + role.getSubstitutionType().getName() + " value");
                        return;
                    } catch (ChangeNotAllowedException ex) {
                        Logger.getLogger(TypeConfigurator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miDefaultValueActionPerformed

    private void miObjectifyRolesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miObjectifyRolesActionPerformed

        int[] selectedValues = tbRoles.getSelectedRows();

        if (selectedValues.length == 0) {
            return;
        }
        FactType ft = getSelectedFactType();
        List<Role> roles = new ArrayList<>();
        for (int selectedValue : selectedValues) {
            roles.add(ft.getRole(selectedValue));
        }
        if (roles.get(0).hasCommonUniquenessWith(roles)) {
            ObjectifyRolesDialog mergeRolesDialog = new ObjectifyRolesDialog(roles, parent, om,
                    om.getProject().getCurrentUser());
            mergeRolesDialog.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(parent, "selected roles don't have a common uniqueness constraint");
        }
        reliableClasses = false;
        refresh();
    }//GEN-LAST:event_miObjectifyRolesActionPerformed

    private void miRemovableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRemovableActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            if (miRemovable.isSelected()) {

                role.addRemovable("");

            } else {
                try {
                    role.getRemovable().remove();
                } catch (ChangeNotAllowedException ex) {
                    Logger.getLogger(TypeConfigurator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miRemovableActionPerformed

    private void miReplaceBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miReplaceBTActionPerformed

        int[] selectedValues = tbRoles.getSelectedRows();
        if (selectedValues.length != 1) {
            return;
        }
        Role r = getSelectedRole();
        if (r instanceof ObjectRole) {
            return;
        }
        BaseValueRole role = (BaseValueRole) r;
        FactType ft = role.getParent();
        int roleNr = role.getNr();
        BaseTypeDialog dialog = new BaseTypeDialog(parent, true, role.getSubstitutionType().getName());
        dialog.setVisible(true);
        if (dialog.getBaseType() != null) {
            BaseType bt = BaseType.getBaseType(dialog.getBaseType());
            if (role.getSubstitutionType().equals(bt)) {
                return;
            } else {
                Iterator<Tuple> itTuples = ft.getPopulation().tuples();
                while (itTuples.hasNext()) {
                    TupleItem tupleItem = itTuples.next().getItem(roleNr);
                    try {
                        bt.checkSyntaxis(tupleItem.getValue().toString());
                    } catch (MismatchException ex) {
                        JOptionPane.showMessageDialog(parent, ex.getMessage());
                        return;
                    }
                }
                role.setBaseType(bt);
                tbRoles.setModel(new RoleTableModel(ft));
            }
        }
        reliableClasses = false;
        refresh();
    }//GEN-LAST:event_miReplaceBTActionPerformed

    private void miDeobjectifyRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDeobjectifyRoleActionPerformed

        int[] selectedValues = tbRoles.getSelectedRows();
        if (selectedValues.length != 1) {
            return;
        }

        Role r = getSelectedRole();
        if (r instanceof BaseValueRole) {
            return;
        }

        ObjectRole role = (ObjectRole) r;
        FactType ft = role.getParent();
        try {
            ft.deobjectifyRole(role);
            reliableClasses = false;
            refresh();
        } catch (ChangeNotAllowedException ex) {
            JOptionPane.showMessageDialog(parent, ex.getMessage());
        }

    }//GEN-LAST:event_miDeobjectifyRoleActionPerformed

    private void miDeobjectifyFTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDeobjectifyFTActionPerformed
        FactType ft = getSelectedFactType();
        if (ft == null) {
            return;
        }
        if (ft.isObjectType()) {
            if (ft.getFTE() == null) {
                ft.setFTE(new TypeExpression(ft.getObjectType().getOTE()));
            }
            EditTypeExpressionDialog dialog = new EditTypeExpressionDialog(this.parent, ft, ft.getFTE(),
                    "Edit Fact Type Expression", om.getProject().getCurrentUser());
            dialog.setVisible(true);
            try {
                ft.deobjectify();
                reliableClasses = false;
                refresh();
            } catch (ChangeNotAllowedException ex) {
                JOptionPane.showMessageDialog(parent, ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(parent, ft.getName() + " is not an objecttype");
        }
    }//GEN-LAST:event_miDeobjectifyFTActionPerformed

    private void miReplaceWithSuperTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miReplaceWithSuperTypeActionPerformed
        // TODO add your handling code here:
        int[] selectedValues = tbRoles.getSelectedRows();
        if (selectedValues.length != 1) {
            return;
        }

        Role r = getSelectedRole();
        if (r instanceof BaseValueRole) {
            return;
        }
        ObjectRole role = (ObjectRole) r;
        ObjectType ot = role.getSubstitutionType();
        Object[] os = ot.allSupertypes().toArray();
        if (os.length == 0) {
            JOptionPane.showMessageDialog(parent, "There are no convenient supertypes present. You can add an "
                    + "abstract object type via Menu: ObjectModel --> Add Abstract Object Type");
            return;
        }
        ObjectType selected = (ObjectType) JOptionPane.showInputDialog(parent, "Choose one",
                "SuperType", JOptionPane.INFORMATION_MESSAGE, null, os, os[0]);
        if (selected == null) {
            return;
        }

        try {
            role.setSubstitutionType(selected);
            if (ot.getName().equalsIgnoreCase(role.getRoleName())) {
                try {
                    ot.getFactType().setRoleName(selected.getName(), role);
                } catch (DuplicateException ex) {
                }
            }
            reliableClasses = false;
            refresh();
        } catch (ChangeNotAllowedException ex) {
            JOptionPane.showMessageDialog(parent, ex.getMessage());
        }

    }//GEN-LAST:event_miReplaceWithSuperTypeActionPerformed

    private void miInheritanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miInheritanceActionPerformed
        InheritanceDialog dialog = new InheritanceDialog(parent, true, om);
        dialog.setVisible(true);
        reliableClasses = false;
        refresh();
    }//GEN-LAST:event_miInheritanceActionPerformed

    private void miReplaceWithSubTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miReplaceWithSubTypeActionPerformed
        int[] selectedValues = tbRoles.getSelectedRows();
        if (selectedValues.length != 1) {
            return;
        }
        Role r = getSelectedRole();
        if (r instanceof BaseValueRole) {
            return;
        }
        ObjectRole role = (ObjectRole) r;
        ObjectType ot = role.getSubstitutionType();
        Object[] os = ot.allSubtypes().toArray();
        if (os.length == 0) {
            return;
        }
        ObjectType selected = (ObjectType) JOptionPane.showInputDialog(parent, "Choose one",
                "SubType", JOptionPane.INFORMATION_MESSAGE, null, os, os[0]);
        try {
            role.setSubstitutionType(selected);
            if (ot.getName().equalsIgnoreCase(role.getRoleName())) {
                try {
                    ot.getFactType().setRoleName(selected.getName(), role);
                } catch (DuplicateException ex) {
                }
            }
            reliableClasses = false;
            refresh();
        } catch (ChangeNotAllowedException ex) {
            JOptionPane.showMessageDialog(parent, ex.getMessage());
        }

    }//GEN-LAST:event_miReplaceWithSubTypeActionPerformed

    private void tbFactTypesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbFactTypesMousePressed
        if (evt.isPopupTrigger()) {
            int clickedIndex = tbFactTypes.rowAtPoint(evt.getPoint());
            tbFactTypes.setEditingRow(clickedIndex);

            updateFactTypePopup();
            factTypePopup.show(tbFactTypes, evt.getX(), evt.getY());
        }

    }//GEN-LAST:event_tbFactTypesMousePressed

    private void tbFactTypesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbFactTypesMouseClicked
        int clickedIndex = tbFactTypes.rowAtPoint(evt.getPoint());
        tbFactTypes.setEditingRow(clickedIndex);
        refresh();
    }//GEN-LAST:event_tbFactTypesMouseClicked

    private void tbRolesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbRolesMousePressed
        if (evt.isPopupTrigger()) {
            int clickedIndex = tbRoles.rowAtPoint(evt.getPoint());
            tbRoles.setEditingRow(clickedIndex);

            updateRolePopup();
            rolePopup.show(tbRoles, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tbRolesMousePressed

    private void miUniquenessMandatoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miUniquenessMandatoryActionPerformed
        // TODO add your handling code here:
        int[] selectedValues = tbRoles.getSelectedRows();
        if (selectedValues.length != 1) {
            return;
        }
        FactType ft = getSelectedFactType();
        List<Role> roles = new ArrayList<>();

        roles.add(ft.getRole(selectedValues[0]));

        String rule_text = "Two (or more) facts about " + roles.get(0).getParent().getFactTypeString()
                + " with the same value on <"
                + roleValues(roles) + "> are not allowed.";

        RuleRequirement rule = initRule(rule_text, ft.getCategory());
        try {
            new UniquenessConstraint(roles, rule);

        } catch (ChangeNotAllowedException ex) {
            Logger.getLogger(TypeConfigurator.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        reliableClasses = false;
        miMandatoryActionPerformed(evt);
    }//GEN-LAST:event_miUniquenessMandatoryActionPerformed

    private void miAdjustableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAdjustableActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            if (miAdjustable.isSelected()) {

                role.addAdjustable("");

            } else {
                try {
                    role.getAdjustable().remove();
                } catch (ChangeNotAllowedException ex) {
                    Logger.getLogger(TypeConfigurator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miAdjustableActionPerformed

    private void miInsertableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miInsertableActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        } else {
            if (miInsertable.isSelected()) {

                role.addInsertable("");
            } else {
                try {
                    role.getInsertable().remove();
                } catch (ChangeNotAllowedException ex) {
                    Logger.getLogger(TypeConfigurator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            reliableClasses = false;
            refresh();
        }
    }//GEN-LAST:event_miInsertableActionPerformed

    private void tfFactTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfFactTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfFactTypeActionPerformed

    private void miComparableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miComparableActionPerformed
        FactType ft = getSelectedFactType();
        if (ft.isObjectType()) {
            ObjectType ot = ft.getObjectType();
            ot.setComparable(!ot.isComparable());
            refresh();
        }
    }//GEN-LAST:event_miComparableActionPerformed

    private void tbFactTypesComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_tbFactTypesComponentAdded
        // TODO add your handling code here:
        setReliable(false);
    }//GEN-LAST:event_tbFactTypesComponentAdded

    private void tbFactTypesComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_tbFactTypesComponentRemoved
        // TODO add your handling code here:
        setReliable(false);
    }//GEN-LAST:event_tbFactTypesComponentRemoved

    private void miFrequencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFrequencyActionPerformed
        ObjectRole role = (ObjectRole) getSelectedRole();
        if (role == null) {
            JOptionPane.showMessageDialog(this, "please select exactly one role");
        }
        if (role.getFrequencyConstraint() != null) {
            try {
                role.getFrequencyConstraint().remove();
            } catch (ChangeNotAllowedException ex) {
                Logger.getLogger(TypeConfigurator.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {

            FrequencyDialog dialog = new FrequencyDialog(parent, true);
            dialog.setVisible(true);
            if (dialog.getMin() != -1 && dialog.getMax() != -1) {

                String ruleText;
                String roleName = role.detectRoleName();
                ruleText = "The frequency of <" + roleName + "> within the actual facts of "
                        + role.getParent().getFactTypeString()
                        + " must be in the range " + dialog.getMin() + ".." + dialog.getMax() + " (bounds included).";
                RuleRequirement rule = createRuleRequirement(ruleText, role.getParent().getCategory());
                try {
                    role.setFrequencyConstraint(dialog.getMin(), dialog.getMax(), rule);
                } catch (ChangeNotAllowedException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_miFrequencyActionPerformed

    private void miAutoIncrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAutoIncrActionPerformed

        Role role = getSelectedRole();
        try {
            ((BaseValueRole) role).setAutoIncrement(!role.isAutoIncr());
        } catch (ChangeNotAllowedException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_miAutoIncrActionPerformed

    private void miDefaultBooleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDefaultBooleanActionPerformed
        // TODO add your handling code here:
        FactType ft = getSelectedFactType();
        if (ft == null) {
            return;
        }
        BooleanDialog dialog = new BooleanDialog(parent, true);
        dialog.setTitle("select false, true or undefined (empty line)");
        dialog.setVisible(true);
        ft.addDefaultValue(dialog.getBoolean());
        refresh();
    }//GEN-LAST:event_miDefaultBooleanActionPerformed

    private void miChangeIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miChangeIdActionPerformed
        // TODO add your handling code here:
        FactType ft = getSelectedFactType();
        if (ft == null || !ft.isObjectType()) {
            return;
        }
        ObjectType ot = ft.getObjectType();
        if (ot.isMutable()) {
            try {
                ot.getMutablePermission().remove();
            } catch (ChangeNotAllowedException ex) {
                Logger.getLogger(TypeConfigurator.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            ot.addMutable("");
        }
        refresh();
    }//GEN-LAST:event_miChangeIdActionPerformed

    private FactType getSelectedFactType() {
        int row = tbFactTypes.getEditingRow();
        if (row == -1 || row >= tbFactTypes.getModel().getRowCount()) {
            return null;
        } else {
            return om.getFactType((String) tbFactTypes.getModel().getValueAt(row, 1));
        }
    }

    private Role getSelectedRole() {
        if (tbRoles.getSelectedRowCount() == 1) {
            return getSelectedFactType().getRole(tbRoles.getSelectedRow());
        } else {
            return null;
        }
    }

    private List<Role> getSelectedRoles() {
        List<Role> roles = new ArrayList<>();
        FactType ft = getSelectedFactType();
        for (int i = 0; i < tbRoles.getRowCount(); i++) {
            if (tbRoles.isRowSelected(i)) {
                roles.add(ft.getRole(i));
            }
        }
        return roles;
    }

    private String roleValues(List<Role> roles) {
        StringBuilder sb = new StringBuilder();
        sb.append(roles.get(0).getNamePlusType());
        for (int i = 1; i < roles.size(); i++) {
            sb.append(", ").append(roles.get(i).getNamePlusType());
        }
        return sb.toString();
    }

    private void updateRolePopup() {

        int[] numbers;
        numbers = tbRoles.getSelectedRows();
        if (numbers.length == 0) {
            return;
        }
        FactType ft = getSelectedFactType();
        List<Role> roles = new ArrayList<>();
        for (int nr : numbers) {
            roles.add(ft.getRole(nr));
        }
        Role role = roles.get(0);
        switchOffRoleMenuItems();

        // required enabling of menu items: 
        if (ft.isGenerated()) {
            if (numbers.length == 1) {
                if (role instanceof ObjectRole) {
                    ObjectRole objectRole = (ObjectRole) role;
                    miAddable.setEnabled(objectRole.isCandidateAddable());
                    miRemovable.setEnabled(objectRole.isCandidateRemovable());
                }
            }
        } else {
            miUniqueness.setEnabled(!ft.isConstrainedBaseType());
            miObjectifyRoles.setEnabled(!ft.isConstrainedBaseType());
            if (numbers.length == 1) {
                miRenameRole.setEnabled(true);
                miQualifier.setEnabled(role.isCandidateQualifier());
                miHidden.setEnabled(!ft.isConstrainedBaseType());
                miAutoIncr.setEnabled(role.isCandidateAutoIncr());
                if (role instanceof BaseValueRole) {
                    miDefaultValue.setEnabled(true);
                    miConstrainedBaseType.setEnabled(!ft.isConstrainedBaseType());
                    miReplaceBT.setEnabled(true);

                } else { // ObjectRole
                    ObjectRole objectRole = (ObjectRole) role;
                    miMandatory.setEnabled(!role.getSubstitutionType().isValueType());

                    miSettable.setEnabled(objectRole.isCandidateSettable());
                    miAdjustable.setEnabled(objectRole.isCandidateAdjustable());
                    miNavigable.setEnabled(!role.isResponsible());
                    miAddable.setEnabled(objectRole.isCandidateAddable());
                    miInsertable.setEnabled(objectRole.isCandidateInsertable());
                    miRemovable.setEnabled(objectRole.isCandidateRemovable());
                    miComposition.setEnabled(objectRole.isCandidateComposition());

                    miReplaceWithSuperType.setEnabled(!ft.isGenerated());
                    miReplaceWithSubType.setEnabled(!ft.isGenerated());
                    miDeobjectifyRole.setEnabled(true);
                    miDefaultValue.setEnabled(role.getSubstitutionType() instanceof ConstrainedBaseType);
                }
            } else {
                miMandatory.setEnabled(false);
            }
        }

        // view on value of concerning property
        selectUniqueness(numbers, ft);
        if (numbers.length == 1) {
            miUniquenessMandatory.setEnabled(miUniqueness.isEnabled() && miMandatory.isEnabled()
                    && !miUniqueness.isSelected() && !miMandatory.isSelected());
            miFrequency.setEnabled(role.isMultiple() || role.isQualified());
            miFrequency.setSelected(role.isRestrictedByFrequencyConstraint());
            miHidden.setSelected(role.isHidden());
            miQualifier.setSelected(role.isQualifier());
            if (role instanceof BaseValueRole) {
                miDefaultValue.setSelected(role.hasDefaultValue());
                miAutoIncr.setSelected(role.isAutoIncr());
            } else {
                miMandatory.setSelected(role.isMandatory());
                miSettable.setSelected(role.isSettable());
                miAdjustable.setSelected(role.isAdjustable());
                miAddable.setSelected(role.isAddable());
                miInsertable.setSelected(role.isInsertable());
                miRemovable.setSelected(role.isRemovable());
                miComposition.setSelected(role.isComposition());
                miNavigable.setSelected(role.isNavigable());
            }
        }

        if (ft.isCollectionType()) {
            switchOffRoleMenuItems();
        }
    }

    private void selectUniqueness(int[] numbers, FactType ft) {

        HashSet<UniquenessConstraint> ucs = new HashSet<>();
        ucs.addAll(ft.getRole(numbers[0]).ucs());
        for (int i = 1; i < numbers.length; i++) {
            ucs.retainAll(ft.getRole(numbers[i]).ucs());
        }
        boolean unique = false;
        Iterator<UniquenessConstraint> itUcs = ucs.iterator();
        while (itUcs.hasNext()) {
            if (itUcs.next().size() == numbers.length) {
                unique = true;
            }
        }
        miUniqueness.setSelected(unique);
    }

    private void switchOffFactTypeMenuItems() {
        miRename.setEnabled(false);
        miTypeExpression.setEnabled(false);
        miDerivable.setEnabled(false);

        miObjectifyFT.setEnabled(false);
        miDeobjectifyFT.setEnabled(false);
        miValueType.setEnabled(false);
        miValueConstraint.setEnabled(false);
        miRemoveFT.setEnabled(false);
        miInheritance.setEnabled(false);
        miComparable.setEnabled(false);
        miAbstractOT.setEnabled(false);
        miChangeId.setSelected(false);

        miDerivable.setSelected(false);

        miValueType.setSelected(false);
        miComparable.setSelected(false);
        miChangeId.setSelected(false);

    }

    private void switchOffRoleMenuItems() {
        miRenameRole.setEnabled(false);
        miUniqueness.setEnabled(false);
        miUniquenessMandatory.setEnabled(false);
        miFrequency.setEnabled(false);
        miMandatory.setEnabled(false);
        miAddable.setEnabled(false);
        miAdjustable.setEnabled(false);
        miInsertable.setEnabled(false);
        miSettable.setEnabled(false);
        miRemovable.setEnabled(false);
        miComposition.setEnabled(false);
        miQualifier.setEnabled(false);
        miNavigable.setEnabled(false);
        miHidden.setEnabled(false);
        miDefaultValue.setEnabled(false);
        miConstrainedBaseType.setEnabled(false);
        miObjectifyRoles.setEnabled(false);
        miReplaceBT.setEnabled(false);
        miReplaceWithSuperType.setEnabled(false);
        miReplaceWithSubType.setEnabled(false);
        miDeobjectifyRole.setEnabled(false);
        miAutoIncr.setEnabled(false);

        miUniqueness.setSelected(false);
        miMandatory.setSelected(false);
        miAddable.setSelected(false);
        miSettable.setSelected(false);
        miAdjustable.setSelected(false);
        miRemovable.setSelected(false);
        miInsertable.setSelected(false);
        miComposition.setSelected(false);
        miQualifier.setSelected(false);
        miNavigable.setSelected(false);
        miHidden.setSelected(false);
        miDefaultValue.setSelected(false);
        miFrequency.setSelected(false);
        miAutoIncr.setSelected(false);
    }

    private RuleRequirement createRuleRequirement(String text, Category cat) {
        RequirementModel rm = om.getProject().getRequirementModel();
        ProjectRole currentUser = om.getProject().getCurrentUser();
        RuleRequirement rule = rm.addRuleRequirement(cat, text,
                new ExternalInput("", currentUser));
        return rule;
    }

    private ActionRequirement createActionRequirement(String text, Category cat) {
        RequirementModel rm = om.getProject().getRequirementModel();
        ProjectRole currentUser = om.getProject().getCurrentUser();
        ActionRequirement rule = rm.addActionRequirement(cat, text,
                new ExternalInput("", currentUser));
        return rule;
    }

    private RuleRequirement initRule(String rule_text, Category cat) {
        // bad smell:
        ExternalInput input;
        ProjectRole participant = om.getProject().getCurrentUser();
        if (participant instanceof ProjectMemberRole) {
            input = new ExternalInput("system design assumption", participant);
        } else {
            input = new ExternalInput("", participant);
        }
        RuleRequirement rule = om.getProject().getRequirementModel().addRuleRequirement(cat,
                rule_text, input);
        // end of bad smell
        return rule;
    }

    private static String inheritString(ObjectType ot) {
        String s = ot.getFactType().inheritsString();
        if (s.isEmpty()) {
            return s;
        } else {
            return "inherits " + s;
        }
    }

    private void updateFactTypePopup() {
        FactType factType = getSelectedFactType();
        if (factType == null) {
            return;
        }

        switchOffFactTypeMenuItems();
        if (factType.isGenerated()) {
            miRemoveFT.setEnabled(true);

        } else {
            miRename.setEnabled(true);
            miTypeExpression.setEnabled(factType.size() > 0
                    || (factType.isObjectType() && factType.getObjectType().isSingleton()));
            miDerivable.setEnabled(factType.size() > 0 && !factType.isValueType());
            miDerivable.setSelected(factType.getDerivableText() != null);

            miObjectifyFT.setEnabled(!factType.isObjectType() && factType.isObjectifiable());
            miDeobjectifyFT.setEnabled(factType.isObjectType() && !factType.isConstrainedBaseType());
            miValueType.setEnabled(!(factType.isConstrainedBaseType() && (factType.isObjectType() || factType.isObjectifiable())));
            if (factType.isObjectType()) {
                ObjectType ot = factType.getObjectType();
                miValueType.setSelected(ot.isValueType());
                miComparable.setEnabled(true);
                miComparable.setSelected(ot.isComparable());
                miAbstractOT.setEnabled(true);
                miChangeId.setEnabled(factType.isCandidateMutable());
                miChangeId.setSelected(factType.isMutable());
                if (factType.isCollectionType()) {
                    miTypeExpression.setEnabled(false);
                    miDeobjectifyFT.setEnabled(false);
                }
            }
            miValueConstraint.setEnabled(factType.isConstrainedBaseType());

            miInheritance.setEnabled(factType.isObjectType() && !factType.isGenerated());
            miRemoveFT.setEnabled(true);
            miDefaultBoolean.setEnabled(factType.size() == 1 && !factType.isObjectType());
            miDefaultBoolean.setSelected(factType.getDefaultValue() != null);
        }

        if (factType instanceof ElementsFactType) {
            switchOffFactTypeMenuItems();
        }
    }

    @Override
    public DockKey getDockKey() {
        return key;
    }

    @Override
    public Component getComponent() {
        return this;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu factTypePopup;
    private javax.swing.JList lsOperations;
    private javax.swing.JCheckBoxMenuItem miAddable;
    private javax.swing.JCheckBoxMenuItem miAdjustable;
    private javax.swing.JCheckBoxMenuItem miAutoIncr;
    private javax.swing.JCheckBoxMenuItem miChangeId;
    private javax.swing.JCheckBoxMenuItem miComparable;
    private javax.swing.JCheckBoxMenuItem miComposition;
    private javax.swing.JMenuItem miConstrainedBaseType;
    private javax.swing.JCheckBoxMenuItem miDefaultBoolean;
    private javax.swing.JCheckBoxMenuItem miDefaultValue;
    private javax.swing.JMenuItem miDeobjectifyFT;
    private javax.swing.JMenuItem miDeobjectifyRole;
    private javax.swing.JCheckBoxMenuItem miDerivable;
    private javax.swing.JCheckBoxMenuItem miFrequency;
    private javax.swing.JCheckBoxMenuItem miHidden;
    private javax.swing.JMenuItem miInheritance;
    private javax.swing.JCheckBoxMenuItem miInsertable;
    private javax.swing.JCheckBoxMenuItem miMandatory;
    private javax.swing.JCheckBoxMenuItem miNavigable;
    private javax.swing.JMenuItem miObjectifyFT;
    private javax.swing.JMenuItem miObjectifyRoles;
    private javax.swing.JCheckBoxMenuItem miQualifier;
    private javax.swing.JCheckBoxMenuItem miRemovable;
    private javax.swing.JMenuItem miRemoveFT;
    private javax.swing.JMenuItem miRename;
    private javax.swing.JMenuItem miRenameRole;
    private javax.swing.JMenuItem miReplaceBT;
    private javax.swing.JMenuItem miReplaceWithSubType;
    private javax.swing.JMenuItem miReplaceWithSuperType;
    private javax.swing.JCheckBoxMenuItem miSettable;
    private javax.swing.JMenuItem miTypeExpression;
    private javax.swing.JCheckBoxMenuItem miUniqueness;
    private javax.swing.JMenuItem miUniquenessMandatory;
    private javax.swing.JMenuItem miValueConstraint;
    private javax.swing.JCheckBoxMenuItem miValueType;
    private javax.swing.JPanel pnClass;
    private javax.swing.JPanel pnFactType;
    private javax.swing.JPanel pnRoles;
    private javax.swing.JPopupMenu rolePopup;
    private javax.swing.JPopupMenu.Separator sFactType1;
    private javax.swing.JPopupMenu.Separator sFactType2;
    private javax.swing.JPopupMenu.Separator sRole2;
    private javax.swing.JPopupMenu.Separator sRole3;
    private javax.swing.JPopupMenu.Separator sRole4;
    private javax.swing.JPopupMenu.Separator sRole5;
    private javax.swing.JPopupMenu.Separator sRole6;
    private javax.swing.JScrollPane spFactTypes;
    private javax.swing.JScrollPane spOperations;
    private javax.swing.JScrollPane spRoles;
    private javax.swing.JScrollPane spSpecification;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTextArea taSpecification;
    private javax.swing.JTable tbFactTypes;
    private javax.swing.JTable tbRoles;
    private javax.swing.JTextField tfFactType;
    private javax.swing.JTextField tfObjecttype;
    // End of variables declaration//GEN-END:variables

    private void setColumnsFactTypeTable() {
        if (tbFactTypes.getModel() == null) {
            return;
        }
        for (String name : FactTypeTableModel.COLUMN_NAMES) {
            tbFactTypes.getColumn(name).setMinWidth(24);
        }

        tbFactTypes.getColumn(FactTypeTableModel.COLUMN_NAMES[0]).setMinWidth(30);
        tbFactTypes.getColumn(FactTypeTableModel.COLUMN_NAMES[1]).setMinWidth(150);
        tbFactTypes.getColumn(FactTypeTableModel.COLUMN_NAMES[2]).setMinWidth(360);
        tbFactTypes.getColumn(FactTypeTableModel.COLUMN_NAMES[3]).setMinWidth(50);
        tbFactTypes.getColumn(FactTypeTableModel.COLUMN_NAMES[4]).setMinWidth(50);
    }

    public void setReliable(boolean reliable) {
        reliableClasses = reliable;
    }

    public void setReliable(List<Message> messages) {
        for (Message message : messages) {
            if (message.isError()) {
                setReliable(false);
                return;
            }
        }
        setReliable(true);
    }

    private void setRoleTableModel(FactType ft) {
        if (tbRoles.getModel() != null) {
            tbRoles.setModel(new RoleTableModel(ft));
        } else {
            tbRoles.setModel(new RoleTableModel(ft));
            for (String name : RoleTableModel.COLUMN_NAMES) {
                tbRoles.getColumn(name).setMinWidth(24);
            }

            tbRoles.getColumn(RoleTableModel.COLUMN_NAMES[0]).setPreferredWidth(80);
            tbRoles.getColumn(RoleTableModel.COLUMN_NAMES[1]).setPreferredWidth(80);
            tbRoles.revalidate();
        }
    }
}
